{"version":3,"sources":["webpack:///../srcdocs/upgrade.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"weAMO,IAAMA,EAAe,Q,qMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,iBADR,iBAGA,iBAAQ,CACN,GAAM,yBADR,2BAGA,oIACA,iBAAQ,CACN,GAAM,UADR,UAGA,qHACA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,iBADZ,6QAiBL,iBAAQ,CACN,GAAM,UADR,UAGA,qCAAoB,0BAAYA,WAAW,KAAvB,YAApB,iBAA0F,0BAAYA,WAAW,KAAvB,aAC1F,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,wMAQL,gCAAe,0BAAYA,WAAW,KAAvB,YAAf,wDAA4H,0BAAYA,WAAW,KAAvB,SAA5H,wFACyE,0BAAYA,WAAW,KAAvB,YADzE,oBAEA,yDAAwC,0BAAYA,WAAW,KAAvB,WAAxC,QAAoG,0BAAYA,WAAW,KAAvB,UAApG,wHAA+Q,sBAAQA,WAAW,KAAnB,MAA/Q,kBAAwU,sBAAQA,WAAW,KAAnB,OAAxU,eACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,mNAQL,iBAAQ,CACN,GAAM,aADR,aAGA,sCAAqB,0BAAYA,WAAW,KAAvB,QAArB,qEAA2I,0BAAYA,WAAW,KAAvB,iBAA3I,0HAA+T,mBAAGA,WAAW,KAAQ,CACjV,KAAQ,0BADmT,WAA/T,8BAGA,iBAAQ,CACN,GAAM,cADR,cAGA,iDAAgC,0BAAYA,WAAW,KAAvB,SAAhC,mIAAqN,mBAAGA,WAAW,KAAQ,CACvO,KAAQ,0BADyM,WAArN,+B,4LAOJJ,EAAWK,gBAAiB","file":"component---srcdocs-upgrade-mdx-c6eadf8f582d6cf92114.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/giovambattistafazioli/Lavori/Github/react-toggle/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"upgrade-guide\"\n    }}>{`Upgrade Guide`}</h1>\n    <h2 {...{\n      \"id\": \"upgrade-to-20-from-1x\"\n    }}>{`Upgrade to 2.0 from 1.x`}</h2>\n    <p>{`This version is not fully compatible with the previous 1.x versions. Anyway, you may update your code easly`}</p>\n    <h2 {...{\n      \"id\": \"labels\"\n    }}>{`Labels`}</h2>\n    <p>{`First of all, we've removed the props for the labels. You can upgrade your code by following`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// previous v1.x\n<Toggle label=\"Left label\" />\n\n// Left label from v2.x\n<label htmlFor=\"toggle-a\">\n  Click me\n  <Toggle name=\"toggle-a\" />\n</label>\n\n// Right label from v2.x\n<label htmlFor=\"toggle-b\">\n  <Toggle name=\"toggle-b\" />\n  Click me\n</label>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"events\"\n    }}>{`Events`}</h2>\n    <p>{`The previous `}<inlineCode parentName=\"p\">{`onChange`}</inlineCode>{` event become `}<inlineCode parentName=\"p\">{`onToggle`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// previous v1.x\n<Toggle name=\"toggle-c\" onChange={(checked, evt) => console.log(e.target.checked)} />\n\n// from v2.x\n<Toggle name=\"toggle-c\" onToggle={e => console.log(e.target.checked)} />\n`}</code></pre>\n    <p>{`The new `}<inlineCode parentName=\"p\">{`onToggle`}</inlineCode>{` event, has got only one param, I mean, the standard `}<inlineCode parentName=\"p\">{`event`}</inlineCode>{` object.\nIn fact, you will be able to get all information about the toggle by using `}<inlineCode parentName=\"p\">{`e.target`}</inlineCode>{` as shown above.`}</p>\n    <p>{`In addition, you may use the new `}<inlineCode parentName=\"p\">{`onRight`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`onLeft`}</inlineCode>{` events. They are trigged when the toggle is switched from the left to the right and vice versa. In short, when it's `}<strong parentName=\"p\">{`on`}</strong>{` (usually) and `}<strong parentName=\"p\">{`off`}</strong>{` (usually).`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// from left to the right \"on\"\n<Toggle name=\"toggle-c\" onRight={e => console.log(e.target.name)} />\n\n// from right to the left \"off\"\n<Toggle name=\"toggle-c\" onLeft={e => console.log(e.target.name)} />\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"mode-prop\"\n    }}>{`Mode prop`}</h2>\n    <p>{`Also the prop `}<inlineCode parentName=\"p\">{`mode`}</inlineCode>{` is no longer available. This because in the previous version the `}<inlineCode parentName=\"p\">{`mode=\"switch\"`}</inlineCode>{` was keeping the \"on\" and \"off\" appearance colours the same. Now, you can do the same by using the new props. See the  `}<a parentName=\"p\" {...{\n        \"href\": \"/react-toggle/theming\"\n      }}>{`Theming`}</a>{` section for more details.`}</p>\n    <h2 {...{\n      \"id\": \"theme-prop\"\n    }}>{`Theme prop`}</h2>\n    <p>{`We have also removed the `}<inlineCode parentName=\"p\">{`theme`}</inlineCode>{` prop. Now, you'll be able to create any toggle theme by using the new props for the appearance and the theme provider. See the `}<a parentName=\"p\" {...{\n        \"href\": \"/react-toggle/theming\"\n      }}>{`Theming`}</a>{` section for more details.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}